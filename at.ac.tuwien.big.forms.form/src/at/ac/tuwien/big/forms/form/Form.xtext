// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.form.Form with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: FormModel

FormModel:
	(forms += Form)*
;

Form:
	(welcomeForm ?= 'welcome')? 'form' name = ID title = STRING 'handles' entity = [Entity] '{'
		(pages += Page)*
	'}'
;

Page:
	'page' title = STRING '{'
		( 	
			pageElements += PageElement
			(',' pageElements += PageElement)*
		)? (condition = Condition)?
	'}'
;

PageElement:
	(RelationshipPageElement | AttributePageElement) (condition = Condition)?
;

RelationshipPageElement: 
	(List | Table) 'edits' editingForm = [Form]
	
;

Table:
	'table' elementID = ID label = STRING 'handles' relationship = [Relationship] '{'
		(
			columns += Column 
			(',' columns += Column)*			
		)?
	'}'
;

Column:
	'column' elementID = ID label = STRING 'handles' attribute = [Attribute] 
;

List:
	'list' elementID = ID label = STRING 'handles' relationship = [Relationship]
;

AttributePageElement: 
	(TextField | TextArea | SelectionField | DateSelectionField | TimeSelectionField) 'handles' attribute = [Attribute]
;

TextField:
	'text-field' elementID = ID label = STRING ('format' format = STRING)?
;

TextArea:
	'text-area' elementID = ID label = STRING
;

SelectionField: 
	'selection-field' elementID = ID label = STRING
;

DateSelectionField: 
	'date-selection-field' elementID = ID label = STRING
;

TimeSelectionField: 
	'time-selection-field' elementID = ID label = STRING
;

Condition:
	'with' (AttributeValueCondition | CompositeCondition)
;

AttributeValueCondition: 
	'attribute-condition' conditionID = ID ':' attribute = [Attribute] '==' value = STRING '?' type = ConditionType
;

CompositeCondition:
	'composite-condition' conditionID = ID ':' 
		'(' 
			compositionType = CompositeConditionType	// TODO add composedCondition
			'?' type = ConditionType
		')' 
		
;

ConditionConnector returns Condition:
	(AttributeValueCondition | CompositeCondition)
;

enum ConditionType:
	Show | Hide | Disable | Enable | None
;

enum CompositeConditionType:
	Or | And
;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;
