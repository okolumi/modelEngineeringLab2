// automatically generated by Xtext
grammar at.ac.tuwien.big.forms.entity.Entity with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/forms" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// implement your grammar here, starting with the root element: EntityModel

EntityModel:
	(entityModelElements += EntityModelElement)*
;

EntityModelElement: Entity | Enumeration;

Entity: 
	'entity' name = ID ('extends' superType = [Entity])? '{'
		'id' id = [Attribute] ','
		features += Feature
		(',' features += Feature)* 	
	'}'
;

Feature: 
	Attribute | Relationship
;

Attribute:
	'attribute' name = ID (mandatory ?= '*')? ':' type = AttributeType (':' enumeration = [Enumeration])?
;

enum AttributeType: String | Integer | Text | Boolean | Year | Date | Time | Email | None; 

Relationship:
	'reference' name = ID ':' target = [Entity] '[' lowerBound = EInt '..' upperBound = EInt ']' ('opposite-of' opposite = [Relationship | QualifiedName])?
;

Enumeration: 
	'enum' name = ID '{'
		literals += Literal
		(',' literals += Literal)*
	'}'
;

Literal:
	name = ID '=' value = STRING
;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;
